plugins {
    id 'com.android.application'
}

def my_boost_dir = local_props("boost.dir")
def my_boost_dir_libs = my_boost_dir + "/libs"
def my_boost_dir_inc  = my_boost_dir + "/include"

android {
    namespace = "io.github.trojan_gfw.igniter"
    compileSdk 33

    defaultConfig {
        applicationId "io.github.trojan_gfw.igniter"
        minSdk 30
        targetSdk 33
        versionCode 1
        versionName "1.5"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        externalNativeBuild {
            cmake {
                // flags for the c++ compiler eg "-std=c++14 -frtti -fexceptions"
                // If you set cppFlags to "-std=c++14", you may need to build your boost libraries
                // with the same flags, depending on your compiler defaults.
                // cppFlags "-std=c++14"

                // this causes libc++_shared.so to get packaged into .apk
                arguments '-DANDROID_STL=c++_shared'

                // This is used in CMakeLists.txt so our native code can find/use (prebuilt) boost
                arguments '-DMY_BOOST_LIBS_DIR=' + my_boost_dir_libs
                arguments '-DMY_BOOST_INC_DIR='  + my_boost_dir_inc
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'

        }
    }

    buildFeatures {
        aidl = true
        renderScript = true
        viewBinding true
    }
}

dependencies {
    implementation 'com.github.stealthcopter:AndroidNetworkTools:0.4.5.3'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.activity:activity:1.7.0'
    implementation 'androidx.fragment:fragment:1.5.6'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core:1.10.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'com.google.code.gson:gson:2.8.9'
    // CameraX core library using camera2 implementation
    implementation 'androidx.camera:camera-camera2:1.3.0-alpha05'
    // CameraX Lifecycle Library
    implementation 'androidx.camera:camera-lifecycle:1.3.0-alpha05'
    // CameraX View class
    implementation 'androidx.camera:camera-view:1.3.0-alpha05'
    implementation 'com.google.mlkit:barcode-scanning:17.1.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.2'
    // Fix Duplicate classes in kotlin libs
    // https://gist.github.com/danielcshn/7aa57155d766d46c043fde015f054d40
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

}

//------------------------------------------------------------
def local_props(key) { // reads ~ value from local.properties file
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def val = properties.getProperty(key, null)
    if (val == null)
        throw new GradleException("""\
                cant find value '${key}' in file 'local.properties'.  """)

    return val
}
